import { getRunningQueriesThunk, getStarships } from '@/api/StarWarsService';
import BottomSection from '@/components/BottomSection/BottomSection';
import ErrorBoundary from '@/components/ErrorBoundary/ErrorBoundary';
import Flyout from '@/components/Flyout/Flyout';
import TopSection from '@/components/TopSection/TopSection';
import { useAppSelector } from '@/hooks/hooks';
import { selectTotalStarships } from '@/redux/selectedStarshipsSlice';
import { wrapper } from '@/redux/store';
import { RouteParams } from '@/types/types';
import Head from 'next/head';
import { FC, ReactNode } from 'react';
interface SearchPageProps {
  children?: ReactNode;
}
const getServerSideProps = wrapper.getServerSideProps(
  (store) =>
    async ({ query }) => {
      const { pageId } = query as RouteParams;
      const { searchParam } = store.getState().searchParams;
      await store.dispatch(
        getStarships.initiate({
          searchParam: searchParam,
          pageNum: Number(pageId),
        })
      );
      await Promise.all(store.dispatch(getRunningQueriesThunk()));
      return {
        props: {},
      };
    }
);

const SearchPage: FC<SearchPageProps> = ({ children }) => {
  const selectedStarshipsLength = useAppSelector((state) =>
    selectTotalStarships(state)
  );
  return (
    <>
      <Head>
        <title>StarWars API</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/vite.svg" />
      </Head>
      <ErrorBoundary>
        <main className="main">
          <TopSection />
          <BottomSection>{children}</BottomSection>
          {selectedStarshipsLength ? <Flyout /> : null}
        </main>
      </ErrorBoundary>
    </>
  );
};

export { getServerSideProps, SearchPage as default };
